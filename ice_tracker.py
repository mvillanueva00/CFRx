# -*- coding: utf-8 -*-
"""Ice_Tracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MD6R3SqR0n28B5u1oGFtD-sFCH35Dv7R
"""

import streamlit as st
import matplotlib.pyplot as plt

def simulate_and_plot(freezers, usage_list, freeze_time=3, cases_per_freezer=12):
    days = ["Mon", "Tue", "Wed", "Thu", "Fri"]
    total_cases = freezers * cases_per_freezer
    freezer_stock = total_cases
    shortage = []
    daily_available = []
    availability_tracker = {day: 0 for day in days + ["Next Mon", "Next Tue", "Next Wed"]}

    for i, usage in enumerate(usage_list):
        day = days[i]
        thawed_today = availability_tracker[day]
        freezer_stock += thawed_today
        daily_available.append(freezer_stock)

        if usage <= freezer_stock:
            freezer_stock -= usage
            shortage.append(0)
            thaw_index = i + freeze_time
            thaw_day = days[thaw_index] if thaw_index < len(days) else "Next " + days[thaw_index - len(days)]
            availability_tracker[thaw_day] += usage
        else:
            shortage.append(usage - freezer_stock)
            thaw_index = i + freeze_time
            thaw_day = days[thaw_index] if thaw_index < len(days) else "Next " + days[thaw_index - len(days)]
            availability_tracker[thaw_day] += freezer_stock
            freezer_stock = 0

    total_shortage = sum(shortage)
    extra_freezers_needed = ((total_shortage + cases_per_freezer - 1) // cases_per_freezer) if total_shortage > 0 else 0

    # Chart
    x = range(len(days))
    bar_width = 0.35
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(x, daily_available, width=bar_width, label='Available Cases', color='skyblue')
    ax.bar([p + bar_width for p in x], usage_list, width=bar_width, label='Cases Needed', color='orange')
    ax.plot(x, shortage, color='red', marker='o', label='Shortage')
    ax.set_xlabel('Day')
    ax.set_ylabel('Number of Cases')
    ax.set_title(f'Ice Pack Usage with {freezers} Freezer(s)')
    ax.set_xticks([p + bar_width / 2 for p in x])
    ax.set_xticklabels(days)
    ax.legend()
    ax.grid(axis='y')
    st.pyplot(fig)

    st.subheader("Results")
    st.write("Daily Shortage:", shortage)
    if extra_freezers_needed > 0:
        st.warning(f"⚠️ Add {extra_freezers_needed} more freezer(s) to avoid running out of ice.")
    else:
        st.success("✅ Current number of freezers is sufficient.")

# --- Streamlit App ---
st.title("Ice Pack Freezer Planner")
st.write("Adjust the values below to simulate your weekly freezer usage.")

freezers = st.number_input("Number of Freezers", min_value=1, value=1)

st.subheader("Daily Usage")
usage_list = []
for day in ["Mon", "Tue", "Wed", "Thu", "Fri"]:
    usage = st.number_input(f"{day} usage", min_value=0, value=4)
    usage_list.append(usage)

if st.button("Simulate"):
    simulate_and_plot(freezers, usage_list)
