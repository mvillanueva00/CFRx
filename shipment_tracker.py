# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rRy4QaWcWOoxL9qMqXH1fOTuCtqwkHNV
"""

import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
from io import BytesIO
from matplotlib.backends.backend_pdf import PdfPages

# Set up UI
st.title("Weekly Shipment Tracker")

# Date range input
st.subheader("Enter the date span for this shipment report")
date_span = st.text_input("Date range (e.g. 7/21/2025 - 7/25/2025)", value="7/21/2025 - 7/25/2025")

# Weekdays
days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]

# Input field names
fields = [
    "FedEx Delivery Tickets", "FedEx Patients",
    "DCS Delivery Tickets", "DCS Patients"
]

# Data dictionary
shipment_data = {field: [] for field in fields}

# Input section
st.subheader("Enter daily counts")
for day in days:
    st.markdown(f"### {day}")
    cols = st.columns(2)
    for i, field in enumerate(fields):
        value = cols[i % 2].number_input(f"{field} ({day})", min_value=0, value=0, key=f"{field}_{day}")
        shipment_data[field].append(value)

# Convert to DataFrame
df = pd.DataFrame(shipment_data, index=days)

# Chart: Total delivery tickets per courier
fig, ax = plt.subplots(figsize=(10, 6))
df[["FedEx Delivery Tickets", "DCS Delivery Tickets"]].plot(kind='bar', ax=ax)
ax.set_ylabel("Delivery Tickets")
ax.set_title(f"Delivery Tickets by Courier ({date_span})")
ax.grid(axis='y')
plt.xticks(rotation=45)

# Add totals to chart
totals_text = (
    f"FedEx Tickets: {df['FedEx Delivery Tickets'].sum()}\n"
    f"FedEx Patients: {df['FedEx Patients'].sum()}\n"
    f"DCS Tickets: {df['DCS Delivery Tickets'].sum()}\n"
    f"DCS Patients: {df['DCS Patients'].sum()}"
)

ax.text(
    1.02, 0.5, totals_text,
    transform=ax.transAxes,
    verticalalignment='center',
    fontsize=10,
    bbox=dict(boxstyle='round,pad=0.4', facecolor='lightgray', edgecolor='gray')
)

plt.tight_layout()
st.pyplot(fig)

# Display all totals
st.subheader("Weekly Totals")
for field in fields:
    total = df[field].sum()
    st.write(f"**{field}:** {total}")

# Save chart to PDF
pdf_buffer = BytesIO()
with PdfPages(pdf_buffer) as pdf:
    pdf.savefig(fig)
pdf_buffer.seek(0)
pdf_data = pdf_buffer.read()

st.download_button(
    label="ðŸ“„ Download Chart as PDF",
    data=pdf_data,
    file_name="weekly_shipments.pdf",
    mime="application/pdf"
)
